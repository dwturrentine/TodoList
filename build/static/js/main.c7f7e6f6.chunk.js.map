{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","addTodo","useState","id","task","completed","todo","setTodo","className","onSubmit","e","preventDefault","trim","uuid","TextField","label","name","type","value","onChange","target","Button","Todo","toggleComplete","removeTodo","ListItem","style","display","Checkbox","checked","onClick","Typography","variant","textDecoration","IconButton","TodoList","todos","List","map","LOCAL_STORAGE_KEY","App","setTodos","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","padding","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRA2CeA,MAtCf,YAAgC,IAAZC,EAAW,EAAXA,QAAW,EAEHC,mBAAS,CAC7BC,GAAG,GACHC,KAAK,GACLC,WAAW,IALY,mBAEpBC,EAFoB,KAEdC,EAFc,KAuB3B,OACI,uBAAMC,UAAU,YAAYC,SAZpC,SAAsBC,GAClBA,EAAEC,iBACEL,EAAKF,KAAKQ,SACVX,EAAQ,2BAAKK,GAAN,IAAYH,GAAIU,iBAEvBN,EAAQ,2BAAKD,GAAN,IAAYF,KAAM,QAOzB,UACI,cAACU,EAAA,EAAD,CACAC,MAAM,OACNC,KAAK,OACLC,KAAK,OACLC,MAAOZ,EAAKF,KACZe,SAtBZ,SAA+BT,GAC3BH,EAAQ,2BAAKD,GAAN,IAAYF,KAAMM,EAAEU,OAAOF,YAuB1B,cAACG,EAAA,EAAD,CAAQJ,KAAK,SAAb,wB,8DCDGK,MAhCf,YAAqD,IAArChB,EAAoC,EAApCA,KAAMiB,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WAYlC,OACI,eAACC,EAAA,EAAD,CAAUC,MAAO,CAAEC,QAAU,QAA7B,UACA,cAACC,EAAA,EAAD,CACAC,QAASvB,EAAKD,UAEdyB,QAfJ,WACIP,EAAejB,EAAKH,OAepB,cAAC4B,EAAA,EAAD,CACIC,QAAQ,QACRN,MAAO,CAEPO,eAAgB3B,EAAKD,UAAY,eAAiB,MAJtD,SAMKC,EAAKF,OACV,cAAC8B,EAAA,EAAD,CAAYJ,QAlBhB,WACIN,EAAWlB,EAAKH,KAiBhB,SAAwC,cAAC,IAAD,UCRjCgC,MAjBf,YAAyD,IAArCC,EAAoC,EAApCA,MAAOb,EAA6B,EAA7BA,eAAgBC,EAAa,EAAbA,WACvC,OACI,cAACa,EAAA,EAAD,UACKD,EAAME,KAAI,SAAAhC,GAAI,OACX,cAAC,EAAD,CAEAA,KAAMA,EACNiB,eAAgBA,EAChBC,WAAYA,GAHPlB,SCHfiC,EAAoB,wBAyDXC,MAvDf,WAAgB,IAAD,EACatC,mBAAS,IADtB,mBACNkC,EADM,KACCK,EADD,KA0Cb,OAvCAC,qBAAU,WACR,IAAMC,EAAeC,KAAKC,MAAMC,aAAaC,QAAQR,IACjDI,GACFF,EAASE,KAEV,IAEHD,qBAAU,WACRI,aAAaE,QAAQT,EAAmBK,KAAKK,UAAUb,MAEtD,CAACA,IA8BF,sBAAK5B,UAAU,MAAf,UACI,cAACuB,EAAA,EAAD,CAAYL,MAAO,CAAEwB,QAAS,IAAMlB,QAAQ,KAA5C,wBACA,cAAC,EAAD,CAAU/B,QA9BhB,SAAiBK,GACfmC,EAAS,CAACnC,GAAF,mBAAW8B,QA8Bf,cAAC,EAAD,CACAA,MAAOA,EACPb,eA5BN,SAAwBpB,GACtBsC,EAEEL,EAAME,KAAI,SAAAhC,GACR,OAAIA,EAAKH,KAAOA,EACP,2BACFG,GADL,IAEED,WAAYC,EAAKD,YAIdC,OAkBPkB,WAXN,SAAoBrB,GAClBsC,EAASL,EAAMe,QAAO,SAAA7C,GAAI,OAAIA,EAAKH,KAAOA,aCnC/BiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c7f7e6f6.chunk.js","sourcesContent":["import { TextField, Button } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport {v4 as uuid} from \"uuid\";\n\n\nfunction TodoForm({ addTodo }) {\n\n    const [todo, setTodo] = useState({\n        id:\"\",\n        task:\"\",\n        completed: false\n    })\n\nfunction handleTaskInputChange(e) {\n    setTodo({ ...todo, task: e.target.value });\n}\n\nfunction handleSubmit(e) {\n    e.preventDefault();\n    if (todo.task.trim()) {\n        addTodo({ ...todo, id: uuid() });\n        // Reset Task Input\n        setTodo({ ...todo, task: \"\"});\n\n    }\n}\n    \n\n    return (\n        <form className=\"todo-form\" onSubmit={handleSubmit}> \n            <TextField\n            label=\"Task\" \n            name=\"task\"\n            type=\"text\"\n            value={todo.task}\n            onChange={handleTaskInputChange}\n            />\n            <Button type=\"submit\">Submit</Button>\n        </form>\n    );\n\n}\n\nexport default TodoForm;","import { IconButton, Checkbox, ListItem, Typography } from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport React from \"react\";\n\nfunction Todo({ todo, toggleComplete, removeTodo }) {\n\n    function  handleCheckboxClick() {\n        toggleComplete(todo.id);\n        \n    }\n\n    function  handleRemoveClick() {\n        removeTodo(todo.id);\n        \n    }\n\n    return (\n        <ListItem style={{ display : \"flex\" }}>\n        <Checkbox \n        checked={todo.completed}\n        \n        onClick={handleCheckboxClick} />\n        <Typography \n            variant=\"body1\"\n            style={{\n            \n            textDecoration: todo.completed ? \"line-through\" : null \n        }}>\n            {todo.task}</Typography>\n        <IconButton onClick={handleRemoveClick}><CloseIcon />\n        </IconButton>\n        </ListItem>\n    );\n    \n}\n\nexport default Todo;","import { List } from \"@material-ui/core\";\nimport React from \"react\";\nimport Todo from \"./Todo\";\n\nfunction TodoList( {todos, toggleComplete, removeTodo} ){\n    return(\n        <List>\n            {todos.map(todo => (\n                <Todo \n                key={todo} \n                todo={todo} \n                toggleComplete={toggleComplete}\n                removeTodo={removeTodo}\n                />\n            ))}\n        </List>\n\n    );\n\n}\n\nexport default TodoList;","import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport TodoForm from \"./components/TodoForm\";\nimport TodoList from \"./components/TodoList\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst LOCAL_STORAGE_KEY = \"react-todo-list-todos\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storageTodos) {\n      setTodos(storageTodos);\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n\n  }, [todos])\n\n  function addTodo(todo) {\n    setTodos([todo, ...todos]);\n    \n  }\n\n  function toggleComplete(id) {\n    setTodos (\n      \n      todos.map(todo => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed\n          };\n\n        }\n        return todo;\n      })\n\n    );\n    \n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }\n\n  return (\n    <div className=\"App\">\n        <Typography style={{ padding: 16 }} variant=\"h1\">React ToDo</Typography>\n        <TodoForm addTodo={addTodo} />\n        <TodoList \n        todos={todos} \n        toggleComplete={toggleComplete}\n        removeTodo={removeTodo}\n        />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}